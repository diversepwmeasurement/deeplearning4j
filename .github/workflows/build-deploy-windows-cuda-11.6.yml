jobs:
  windows-x86_64-cuda-11-6:
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Cancel Previous Runs
      uses: styfle/cancel-workflow-action@0.8.0
      with:
        access_token: ${{ github.token }}
    - continue-on-error: true
      uses: actions/checkout@v2
    - continue-on-error: true
      name: Set mvn build command based on matrix
      run: "if ( \"${{ matrix.libnd4j_file_download }}\" -ne \"\" ) {\n   $modules=\"\
        \ :nd4j-cuda-11.6-preset,:nd4j-cuda-11.6\"\n} elseif ( \"${{ matrix.helper\
        \ }}\" -ne \"\" ) {\n   $modules=\":nd4j-cuda-11.6-preset,:nd4j-cuda-11.6,libnd4j\"\
        \n} elseif ( \"${{ matrix.helper }}\" -eq \"\" ) {\n   $modules=\":nd4j-cuda-11.6-preset,:nd4j-cuda-11.6,libnd4j,:nd4j-cuda-11.6-platform\"\
        \n}\n\n$command=\"mvn ${{ matrix.mvn_ext }}  -Pcuda --also-make -pl  $modules\
        \ -Dlibnd4j.compute=`\"5.0 5.2 6.1 7.5 8.6`\" -Dlibnd4j.cpu.compile.skip=true\
        \  -Dlibnd4j.buildthreads=${{ matrix.build_threads }} -Dhttp.keepAlive=false\
        \ -Dmaven.wagon.http.pool=false -Dmaven.wagon.http.retryHandler.count=3  -Possrh\
        \  -Dlibnd4j.buildthreads=${{ github.event.inputs.buildThreads }} -Djavacpp.platform=windows-x86_64\
        \    -Dlibnd4j.platform=windows-x86_64  -Pcuda -Dlibnd4j.chip=cuda  deploy\
        \ -DskipTests\"\n\n\nif ( \"${{ matrix.helper }}\" -ne \"\" -And \"${{ matrix.extension\
        \ }}\" -ne \"\" ) {\n     $mvn_ext=\" -Dlibnd4j.classifier=windows-x86_64-cuda-11.6-${{\
        \ matrix.helper }}-${{matrix.extension}} -Dlibnd4j.extension=${{ matrix.extension\
        \ }} -Djavacpp.platform.extension=-${{ matrix.helper }}-${{ matrix.extension\
        \ }}   -Dlibnd4j.helper=${{ matrix.helper }}   -Pcuda -Dlibnd4j.chip=cuda\
        \  deploy -DskipTests\"\n     $libnd4j_download_file_url=\"windows-cuda-11-${{\
        \ matrix.extension }}-${{ matrix.helper }}\"\n} elseif ( \"${{ matrix.helper\
        \ }}\" -ne \"\" ) {\n     $mvn_ext=\" -Dlibnd4j.classifier=windows-x86_64-cuda-11.6-${{\
        \ matrix.helper }} -Dlibnd4j.extension=${{ matrix.helper }} -Djavacpp.platform.extension=-${{\
        \ matrix.helper }} -Djavacpp.platform=windows-x86_64  -Dlibnd4j.helper=${{\
        \ matrix.helper }}  -Dlibnd4j.platform=windows-x86_64  -Pcuda -Dlibnd4j.chip=cuda\
        \  deploy -DskipTests\"\n     $libnd4j_download_file_url=\"windows-cuda-11-${{\
        \ matrix.helper }}\"\n} else {\n     $libnd4j_download_file_url=\"windows-cuda-11\"\
        \n     $mvn_ext=\" -Dlibnd4j.classifier=windows-x86_64-cuda-11.6\"\n}\n$command2=\
        \ -join(\"$($command)\",\"$($mvn_ext)\");\n$to_write = -join(\"COMMAND=\"\
        ,\"$($command2)\");\nif  (  \"${{ matrix.libnd4j_file_download }}\" -ne  \"\
        \")  {\n   echo \"Adding libnd4j download\"\n   $libnd4j_url_to_write = -join(\"\
        LIBND4J_FILE_NAME=\",\"$(${{ matrix.libnd4j_file_download }}/$libnd4j_download_file_url)\"\
        );\n   echo $libnd4j_url_to_write  | Out-File -FilePath  \"$env:GITHUB_ENV\"\
        \ -Encoding utf8 -Append\n}\necho \"Setting command for helper ${{ matrix.helper\
        \ }} and extension ${{ matrix.extension }} to $($command2) and the libnd4j\
        \ bootstrap file name to $($libnd4j_download_file_url)\"\necho $command2 \
        \ | Out-File -FilePath  \"$env:GITHUB_WORKSPACE/mvn-command.bat\" -Encoding\
        \ utf8 -Append\necho $to_write  | Out-File -FilePath  \"$env:GITHUB_ENV\"\
        \ -Encoding utf8 -Append\necho \"CUDNN_ROOT_DIR=C:\\Program Files\\NVIDIA\
        \ GPU Computing Toolkit\\CUDA\\v11.6\"  | Out-File -FilePath  \"$env:GITHUB_ENV\"\
        \ -Encoding utf8 -Append\n"
      shell: powershell
    - continue-on-error: true
      id: cache-cuda-116
      name: Cache cuda install
      uses: actions/cache@v2
      with:
        key: ${{ matrix.runs_on }}-cuda-11.6-${{ matrix.helper }}
        path: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.6
        restore-keys: ${{ matrix.runs_on }}-cuda-11.6-${{ matrix.helper }}
    - continue-on-error: true
      name: Set up Java for publishing to GitHub Packages
      uses: msys2/setup-msys2@v2
      with:
        install: base-devel  git tar pkg-config unzip p7zip zip autoconf autoconf-archive
          automake patch   mingw-w64-x86_64-make --noconfirm mingw-w64-x86_64-gnupg
          mingw-w64-x86_64-cmake mingw-w64-x86_64-nasm mingw-w64-x86_64-toolchain
          mingw-w64-x86_64-libtool mingw-w64-x86_64-gcc  mingw-w64-x86_64-gcc-fortran
          mingw-w64-x86_64-libwinpthread-git mingw-w64-x86_64-SDL mingw-w64-x86_64-ragel
        msystem: MINGW64
        update: true
    - continue-on-error: true
      env:
        cuda: 11.6.0
      if: steps.cache-cuda-116.outputs.cache-hit != 'true'
      uses: konduitai/cuda-install/.github/actions/install-cuda-windows@master
    - continue-on-error: true
      if: ${{ github.event_name == 'workflow_dispatch' && matrix.debug_enabled  }}
      name: Setup tmate session
      uses: mxschmitt/action-tmate@v3
    - continue-on-error: true
      name: Set up Java for publishing to OSSRH
      uses: konduitai/setup-java@main
      with:
        cache: maven
        distribution: temurin
        gpg-passphrase: MAVEN_GPG_PASSPHRASE
        gpg-private-key: ${{ secrets.SONATYPE_GPG_KEY }}
        java-version: 11
        server-id: ${{ github.event.inputs.serverId }}
        server-password: MAVEN_PASSWORD
        server-username: MAVEN_USERNAME
    - continue-on-error: true
      name: Setup windows path
      run: echo "C:\msys64\usr\bin;C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.6\bin;C:\Program
        Files\NVIDIA GPU Computing Toolkit\CUDA\v11.6\lib\x64;" | Out-File -FilePath
        $env:GITHUB_PATH -Encoding utf8 -Append
      shell: powershell
    - continue-on-error: true
      env:
        GPG_PRIVATE_KEY: ${{ secrets.SONATYPE_GPG_KEY }}
        PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
      name: Import GPG Key
      uses: crazy-max/ghaction-import-gpg@v1
    - continue-on-error: true
      env:
        CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.6
        CUDNN_ROOT_DIR: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.6
        EXTENSION: ${{ matrix.extension }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
        GPG_SIGNING_KEY: ${{ secrets.SONATYPE_GPG_KEY }}
        HELPER: ${{ matrix.helper }}
        LIBND4J_FILE_NAME: ${{ matrix.libnd4j_file_download }}
        LIBND4J_HOME_SUFFIX: cuda
        MAVEN_GPG_KEY: ${{ secrets.SONATYPE_GPG_KEY }}
        MAVEN_GPG_PASSPHRASE: ${{ secrets.PACKAGES_GPG_PASS }}
        MAVEN_OPTS: -Xmx2g
        MAVEN_PASSWORD: ${{ secrets.SONATYPE_USER1_PASS }}
        MAVEN_USERNAME: ${{ secrets.SONATYPE_USER_1 }}
        MODULES: ${{ matrix.mvn_flags }}
        PERFORM_RELEASE: ${{ matrix.deploy_to_release_staging }}
        PUBLISH_TO: ossrh
        RELEASE_REPO_ID: ${{ matrix.release_repo_id }}
        RELEASE_VERSION: ${{ matrix.release_version }}
        SNAPSHOT_VERSION: ${{ matrix.snapshot_version }}
      name: Run cuda build
      run: "echo \"libnd4j build threads ${{ matrix.build_threads }}\"\necho \"deploy\
        \ to release staging repo or not ${{ matrix.deploy_to_release_staging }}\"\
        \necho \"release version ${{ matrix.release_version }}\"\necho \"snapshot\
        \ version ${{ matrix.snapshot_version }}\"\necho \"debug enabled ${{ matrix.debug_enabled\
        \ }}\"\necho \"libnd4j url ${{ matrix.libnd4j_file_download }}\"\necho \"\
        maven flags ${{ matrix.mvn_flags }}\"\necho \"snapshot version ${{ matrix.snapshot_version\
        \ }}\"\necho \"server id ${{ matrix.server_id }}\"\necho \"release repo id\
        \ ${{ matrix.release_repo_id }}\"\n\ncall \"C:\\Program Files (x86)\\Microsoft\
        \ Visual Studio\\2019\\Enterprise\\VC\\Auxiliary\\Build\\vcvars64.bat\"\n\
        set MSYSTEM=MINGW64\necho \"Running cuda build\"\necho \"Command is %COMMAND%\"\
        \nbash ./change-cuda-versions.sh 11.6\nRem Note: we need this for the cudnn\
        \ helpers, our cmake can't find it otherwise.\nRem See here: https://github.com/eclipse/deeplearning4j/blob/master/libnd4j/CMakeLists.txt#L298\n\
        set CUDNN_ROOT_DIR=%CUDA_PATH%\nif \"%PERFORM_RELEASE%\"==\"1\" (\n    echo\
        \ \"Running release\"\n    bash \"%GITHUB_WORKSPACE%/bootstrap-libnd4j-from-url.sh\"\
        \ windows cuda 11.6 \"${{ matrix.helper }}\" \"${{ matrix.extension }}\"\n\
        \    bash \"./release-specified-component.sh\" \"%RELEASE_VERSION%\" \"%SNAPSHOT_VERSION%\"\
        \ \"%RELEASE_REPO_ID%\"\n) else (\n    if \"%PERFORM_RELEASE%\"==1 (\n   \
        \           echo \"Running release\"\n              bash \"%GITHUB_WORKSPACE%/bootstrap-libnd4j-from-url.sh\"\
        \n              bash \"./release-specified-component.sh\" \"%RELEASE_VERSION%\"\
        \ \"%SNAPSHOT_VERSION%\" \"%RELEASE_REPO_ID%\"\n          ) else (\n     \
        \         echo \"Running snapshots\"\n              bash \"%GITHUB_WORKSPACE%/bootstrap-libnd4j-from-url.sh\"\
        \n              call \"%GITHUB_WORKSPACE%\\mvn-command.bat\"\n    )\n)\n"
      shell: cmd
    strategy:
      fail-fast: false
      matrix:
        extension:
        - ''
        helper:
        - cudnn
        - ''
        include:
        - experimental: true
          mvn_ext: ${{ github.event.inputs.mvnFlags }}
          name: Extra maven flags
        - debug_enabled: ${{ github.event.inputs.debug_enabled }}
          experimental: true
          name: Debug enabled
        - experimental: true
          name: OS to run on
          runs_on: ${{ github.event.inputs.runsOn }}
        - experimental: true
          libnd4j_file_download: ${{ github.event.inputs.libnd4jUrl }}
          name: OS to run on
        - deploy_to_release_staging: ${{ github.event.inputs.deployToReleaseStaging
            }}
          experimental: true
          name: Whether to deploy to release staging or not
        - experimental: true
          name: Release version
          release_version: ${{ github.event.inputs.releaseVersion }}
        - experimental: true
          name: Snapshot version
          snapshot_version: ${{ github.event.inputs.snapshotVersion }}
        - experimental: true
          name: Server id
          server_id: ${{ github.event.inputs.serverId }}
        - experimental: true
          name: The release repository to run on
          release_repo_id: ${{ github.event.inputs.releaseRepoId }}
        - experimental: true
          mvn_flags: ${{ github.event.inputs.mvnFlags }}
          name: Extra maven flags to use as part of the build
        - build_threads: ${{ github.event.inputs.buildThreads }}
          experimental: true
          name: The number of threads to build libnd4j with
on:
  repository_dispatch:
    types: trigger-ga___build-deploy-windows-cuda-11.6.yml
