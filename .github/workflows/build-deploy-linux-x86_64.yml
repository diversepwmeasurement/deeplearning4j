jobs:
  linux-x86_64:
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Cancel Previous Runs
      uses: styfle/cancel-workflow-action@0.8.0
      with:
        access_token: ${{ github.token }}
    - continue-on-error: true
      uses: actions/checkout@v2
    - continue-on-error: true
      uses: ./.github/actions/set-linux-distro-version
    - continue-on-error: true
      name: Set mvn build command based on matrix
      run: "if  [  \"${{ matrix.libnd4j_file_download }}\" != '' ]; then\n   modules=':nd4j-native,:nd4j-native-preset'\n\
        else \n echo \"Building libnd4j from source\"\n modules=':nd4j-native,:nd4j-native-preset,:libnd4j'\n\
        fi\ncommand=\"mvn  ${{ matrix.mvn_ext }} -pl $modules -Pcpu -Dlibnd4j.buildthreads=${{\
        \ matrix.build_threads }} -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false\
        \ -Dmaven.wagon.http.retryHandler.count=3   -Possrh  -DskipTestResourceEnforcement=true\
        \  -Dmaven.javadoc.failOnError=false -Djavacpp.platform=linux-x86_64  -Pcpu\
        \  --also-make  --batch-mode deploy -DskipTests\"\nif [ \"${{ matrix.helper\
        \ }}\" != '' ] && [ \"${{ matrix.extension }}\" != '' ]; then\n       mvn_ext=\"\
        \ -Dlibnd4j.helper=${{ matrix.helper }} -Dlibnd4j.extension=${{ matrix.extension\
        \ }} -Djavacpp.platform.extension=-${{ matrix.helper }}-${{ matrix.extension\
        \ }} -Dlibnd4j.classifier=linux-x86_64-${{ matrix.helper }}-${{matrix.extension}}\"\
        \nelif [ \"${{ matrix.helper }}\" != '' ]; then\n       mvn_ext=\" -Dlibnd4j.helper=${{\
        \ matrix.helper }} -Dlibnd4j.extension=${{ matrix.helper }} -Djavacpp.platform.extension=-${{\
        \ matrix.helper }} -Dlibnd4j.classifier=linux-x86_64-${{ matrix.helper }}\"\
        \nelif [ \"${{ matrix.extension }}\" != '' ]; then\n       mvn_ext=\" -Dlibnd4j.extension=${{\
        \ matrix.extension }} -Djavacpp.platform.extension=-${{ matrix.extension }}\
        \ -Dlibnd4j.classifier=linux-x86_64-${{ matrix.extension }}\"\n else\n   \
        \  mvn_ext=\"\"\nfi\nif  [  \"${{ matrix.libnd4j_file_download }}\" != ''\
        \ ]; then\n   echo \"Adding libnd4j download\"\nfi\ncommand=\"${command} ${mvn_ext}\"\
        \necho \"Setting command for helper ${{ matrix.helper }} and extension ${{\
        \ matrix.extension }} to ${command}\"\necho \"COMMAND=${command}\" >> $GITHUB_ENV\n"
      shell: bash
    - continue-on-error: true
      uses: ./.github/actions/update-deps-linux
    - continue-on-error: true
      id: cache-cmake
      name: Cache cmake install
      uses: actions/cache@v2
      with:
        key: ${{ runner.os }}-cmake
        path: /opt/cmake
        restore-keys: ${{ runner.os }}-cmake
    - continue-on-error: true
      id: cache-protobuf
      name: Cache protobuf install
      uses: actions/cache@v2
      with:
        key: ${{ runner.os }}-protobuf
        path: /opt/protobuf
        restore-keys: ${{ runner.os }}-protobuf
    - continue-on-error: true
      if: steps.cache-protobuf.outputs.cache-hit != 'true'
      uses: ./.github/actions/install-protobuf-linux
    - continue-on-error: true
      if: steps.cache-cmake.outputs.cache-hit != 'true'
      uses: ./.github/actions/install-cmake-linux
    - continue-on-error: true
      name: Set up Java for publishing to GitHub Packages
      uses: actions/setup-java@v2
      with:
        cache: maven
        distribution: temurin
        gpg-passphrase: MAVEN_GPG_PASSPHRASE
        gpg-private-key: ${{ secrets.SONATYPE_GPG_KEY }}
        java-version: 11
        server-id: ${{ github.event.inputs.serverId }}
        server-password: MAVEN_PASSWORD
        server-username: MAVEN_USERNAME
    - continue-on-error: true
      if: ${{ github.event.inputs.libnd4jUrl != '' }}
      name: Setup libnd4j home if a download url is specified
      run: 'mkdir "${GITHUB_WORKSPACE}/openblas_home"

        cd "${GITHUB_WORKSPACE}/openblas_home"

        wget https://repo1.maven.org/maven2/org/bytedeco/openblas/0.3.19-1.5.7/openblas-0.3.19-1.5.7-linux-x86_64.jar

        unzip openblas-0.3.19-1.5.7-linux-x86_64.jar

        cd ..

        echo "OPENBLAS_PATH=${GITHUB_WORKSPACE}/openblas_home/org/bytedeco/openblas/linux-x86_64"
        >> "$GITHUB_ENV"

        cp ${GITHUB_WORKSPACE}/openblas_home/org/bytedeco/openblas/linux-x86_64/libopenblas.so.0  ${GITHUB_WORKSPACE}/openblas_home/org/bytedeco/openblas/linux-x86_64/libopenblas.so

        '
      shell: bash
    - continue-on-error: true
      env:
        DEBIAN_FRONTEND: noninteractive
        EXTENSION: ${{ matrix.extension }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        HELPER: ${{ matrix.helper }}
        LIBND4J_FILE_NAME: ${{ matrix.libnd4j_file_download }}
        MAVEN_GPG_KEY: ${{ secrets.SONATYPE_GPG_KEY }}
        MAVEN_GPG_PASSPHRASE: ${{ secrets.PACKAGES_GPG_PASS }}
        MAVEN_OPTS: -Xmx2g
        MAVEN_PASSWORD: ${{ secrets.SONATYPE_USER1_PASS }}
        MAVEN_USERNAME: ${{ secrets.SONATYPE_USER_1 }}
        MODULES: ${{ matrix.mvn_flags }}
        PERFORM_RELEASE: ${{ matrix.deploy_to_release_staging }}
        PUBLISH_TO: ossrh
        RELEASE_REPO_ID: ${{ matrix.release_repo_id }}
        RELEASE_VERSION: ${{ matrix.release_version }}
        SNAPSHOT_VERSION: ${{ matrix.snapshot_version }}
      name: Build on  linux-x86_64
      run: "echo \"libnd4j build threads ${{ matrix.build_threads }}\"\necho \"deploy\
        \ to release staging repo or not ${{ matrix.deploy_to_release_staging }}\"\
        \necho \"release version ${{ matrix.release_version }}\"\necho \"snapshot\
        \ version ${{ matrix.snapshot_version }}\"\necho \"debug enabled ${{ matrix.debug_enabled\
        \ }}\"\necho \"libnd4j url ${{ matrix.libnd4j_file_download }}\"\necho \"\
        maven flags ${{ matrix.mvn_flags }}\"\necho \"snapshot version ${{ matrix.snapshot_version\
        \ }}\"\necho \"server id ${{ matrix.server_id }}\"\necho \"release repo id\
        \ ${{ matrix.release_repo_id }}\"\n\nexport PATH=/opt/protobuf/bin:/opt/cmake/bin:$PATH\n\
        mvn --version\ncmake --version\nprotoc --version\nexport PATH=/opt/protobuf/bin:/opt/cmake/bin:$PATH\n\
        export LIBGOMP_PATH=/usr/lib/gcc/x86_64-linux-gnu/5.5.0/libgomp.so\nif [ -z\
        \ \"${EXTENSION}\" ] || [ -n \"${EXTENSION}\" ]; then\n    export LIBGOMP_PATH=/usr/lib/gcc/x86_64-linux-gnu/7.5.0/libgomp.so\n\
        \    echo \"Extensions specified. This needs a newer version of gcc.\"\n \
        \   sudo apt-get install gcc-7 g++-7\n    echo \"Using newer version of libgomp.\"\
        \n    ls /usr/bin | grep gcc\n    ls /usr/bin | grep g++\n    sudo update-alternatives\
        \ --install /usr/bin/gcc gcc /usr/bin/gcc-7 90\n    sudo update-alternatives\
        \ --install  /usr/bin/g++ g++ /usr/bin/g++-7  90\n    gcc --version\nfi\n\
        # NOTE: Complete hack. Find better way later. This moves libgomp.so to a directory\
        \ where javacpp can find it.\n# For linux, this can be found here: https://github.com/eclipse/deeplearning4j/blob/master/nd4j/nd4j-backends/nd4j-backend-impls/nd4j-native-preset/src/main/java/org/nd4j/nativeblas/Nd4jCpuPresets.java#L150\n\
        # Note also, that the g++ --version as of this writing (May 3,2021) currently\
        \ returns 5.5.0. This will need to be changed in other versions if there is\
        \ an update.\nsudo cp \"${LIBGOMP_PATH}\" /usr/lib\nsudo apt-get -y autoremove\n\
        sudo apt-get -y clean\n# download libnd4j from a url and set it up if LIBND4J_URL\
        \ is defined\nbash ./bootstrap-libnd4j-from-url.sh linux x86_64 \"${{ matrix.helper\
        \ }}\" \"${{ matrix.extension }}\"\nexport LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:$OPENBLAS_PATH\"\
        \nif [ \"$PERFORM_RELEASE\" == 1 ]; then\n          bash ${GITHUB_WORKSPACE}/release-specified-component.sh\
        \ \"${RELEASE_VERSION}\" \"${SNAPSHOT_VERSION}\" \"${RELEASE_REPO_ID}\" \"\
        ${command}\"\n         else\n             echo \"Running build and deploying\
        \ to snapshots\"\n             eval \"${COMMAND}\"\nfi\n"
      shell: bash
    strategy:
      fail-fast: false
      matrix:
        extension:
        - avx2
        - avx512
        - ''
        helper:
        - onednn
        - ''
        include:
        - experimental: true
          mvn_ext: ${{ github.event.inputs.mvnFlags }}
          name: Extra maven flags
        - debug_enabled: ${{ github.event.inputs.debug_enabled }}
          experimental: true
          name: Debug enabled
        - experimental: true
          name: OS to run on
          runs_on: ${{ github.event.inputs.runsOn }}
        - experimental: true
          libnd4j_file_download: ${{ github.event.inputs.libnd4jUrl }}
          name: OS to run on
        - deploy_to_release_staging: ${{ github.event.inputs.deployToReleaseStaging
            }}
          experimental: true
          name: Whether to deploy to release staging or not
        - experimental: true
          name: Release version
          release_version: ${{ github.event.inputs.releaseVersion }}
        - experimental: true
          name: Snapshot version
          snapshot_version: ${{ github.event.inputs.snapshotVersion }}
        - experimental: true
          name: Server id
          server_id: ${{ github.event.inputs.serverId }}
        - experimental: true
          name: The release repository to run on
          release_repo_id: ${{ github.event.inputs.releaseRepoId }}
        - experimental: true
          mvn_flags: ${{ github.event.inputs.mvnFlags }}
          name: Extra maven flags to use as part of the build
        - build_threads: ${{ github.event.inputs.buildThreads }}
          experimental: true
          name: The number of threads to build libnd4j with
on:
  repository_dispatch:
    types: trigger-ga___build-deploy-linux-x86_64.yml
