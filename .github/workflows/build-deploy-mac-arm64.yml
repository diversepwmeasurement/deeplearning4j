jobs:
  mac-arm64:
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Cancel Previous Runs
      uses: styfle/cancel-workflow-action@0.8.0
      with:
        access_token: ${{ github.token }}
    - continue-on-error: true
      uses: actions/checkout@v2
    - continue-on-error: true
      name: Set mvn build command based on matrix
      run: "if  [  \"${{ matrix.libnd4j_file_download }}\" != '' ]; then\n     modules=':nd4j-native,:nd4j-native-preset'\n\
        else \n   echo \"Building libnd4j from source\"\n   modules=':nd4j-native,:nd4j-native-preset,:libnd4j'\n\
        fi\ncommand=\"mvn ${{ matrix.mvn_ext }} -pl  $modules  -Dlibnd4j.arch=armv8-a\
        \  -Dlibnd4j.platform=macosx-arm64 -Djavacpp.platform=macosx-arm64 -Pcpu -Dlibnd4j.buildthreads=${{\
        \ matrix.build_threads }} -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false\
        \ -Dmaven.wagon.http.retryHandler.count=3   -Possrh   -DskipTestResourceEnforcement=true\
        \  -Dmaven.javadoc.failOnError=false -Djavacpp.platform=macosx-arm64  -Pcpu\
        \  --also-make  --batch-mode deploy -DskipTests\"\nif [ \"${{ matrix.helper\
        \ }}\" != '' ] && [ \"${{ matrix.extension }}\" != '' ]; then\n    mvn_ext=\"\
        -Pprotoc-provided-binaries -Dlibnd4j.classifier=macosx-arm64-${{ matrix.helper\
        \ }}-${{matrix.extension}} -Dlibnd4j.helper=${{ matrix.helper }} -Dlibnd4j.extension=${{\
        \ matrix.extension }} -Djavacpp.platform.extension=-${{ matrix.helper }}-${{\
        \ matrix.extension }}\"\nelif [ \"${{ matrix.helper }}\" != '' ]; then\n \
        \   mvn_ext=\" -Pprotoc-provided-binaries -Dlibnd4j.classifier=${{ matrix.helper\
        \ }} -Dlibnd4j.helper=${{ matrix.helper }} -Dlibnd4j.extension=${{ matrix.helper\
        \ }} -Djavacpp.platform.extension=-${{ matrix.helper }}\"\nelif [ \"${{ matrix.extension\
        \ }}\" != '' ]; then\n   mvn_ext=\" -Pprotoc-provided-binaries -Dlibnd4j.classifier=macosx-arm64-${{matrix.extension}}\
        \ -Dlibnd4j.extension=${{ matrix.extension }} -Djavacpp.platform.extension=-${{\
        \ matrix.extension }}\"\nelse\n    mvn_ext=\" -Pprotoc-provided-binaries -Dlibnd4j.classifier=macosx-arm64\"\
        \nfi\nif  [  \"${{ matrix.libnd4j_file_download }}\" != '' ]; then\n  echo\
        \ \"Adding libnd4j download\"\n  echo \"LIBND4J_FILE_NAME=${libnd4j_download_file_url}\"\
        \ >> $GITHUB_ENV\nfi\ncommand=\"${command} ${mvn_ext}\"\necho \"Setting command\
        \ for helper ${{ matrix.helper }} and extension ${{ matrix.extension }} to\
        \ ${command}\"\necho \"COMMAND=${command}\" >> $GITHUB_ENV\nsudo rm -Rf /Library/Developer/CommandLineTools/SDKs/MacOSX10*\n"
      shell: bash
    - continue-on-error: true
      env:
        GPG_PRIVATE_KEY: ${{ secrets.SONATYPE_GPG_KEY }}
        PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
      name: Import GPG Key
      uses: crazy-max/ghaction-import-gpg@v1
    - continue-on-error: true
      name: Set up Java for publishing to OSSRH
      uses: actions/setup-java@v2
      with:
        cache: maven
        distribution: temurin
        gpg-passphrase: MAVEN_GPG_PASSPHRASE
        gpg-private-key: ${{ secrets.SONATYPE_GPG_KEY }}
        java-version: 11
        server-id: ${{ github.event.inputs.serverId }}
        server-password: MAVEN_PASSWORD
        server-username: MAVEN_USERNAME
    - continue-on-error: true
      name: Update path for gnu sed
      run: 'brew install gpg1 gnu-sed unzip  ccache gcc swig autoconf-archive automake
        cmake libomp libtool libusb ant maven nasm xz pkg-config sdl gpg bison flex
        perl ragel binutils gradle gmp isl libmpc mpfr wget python

        echo "$(brew --prefix)/opt/gnu-sed/libexec/gnubin" >> $GITHUB_PATH

        '
      shell: bash
    - continue-on-error: true
      if: ${{ matrix.libnd4j_file_download != '' }}
      name: Setup libnd4j home if a download url is specified
      run: 'mkdir "${GITHUB_WORKSPACE}/openblas_home"

        cd "${GITHUB_WORKSPACE}/openblas_home"

        wget https://repo1.maven.org/maven2/org/bytedeco/openblas/0.3.19-1.5.7/openblas-0.3.19-1.5.7-macosx-arm64.jar

        unzip openblas-0.3.19-1.5.7-macosx-arm64.jar

        cd ..

        cp ${GITHUB_WORKSPACE}/openblas_home/org/bytedeco/openblas/macosx-arm64/libopenblas.0.dylib  ${GITHUB_WORKSPACE}/openblas_home/org/bytedeco/openblas/macosx-arm64/libopenblas.dylib

        echo "OPENBLAS_PATH=${GITHUB_WORKSPACE}/openblas_home/org/bytedeco/openblas/macosx-arm64/"
        >> "$GITHUB_ENV"

        '
      shell: bash
    - continue-on-error: true
      env:
        EXTENSION: ${{ matrix.extension }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        HELPER: ${{ matrix.helper }}
        LIBND4J_FILE_NAME: ${{ matrix.libnd4j_file_download }}
        MAVEN_GPG_KEY: ${{ secrets.SONATYPE_GPG_KEY }}
        MAVEN_GPG_PASSPHRASE: ${{ secrets.PACKAGES_GPG_PASS }}
        MAVEN_OPTS: -Xmx2g
        MAVEN_PASSWORD: ${{ secrets.SONATYPE_USER1_PASS }}
        MAVEN_USERNAME: ${{ secrets.SONATYPE_USER_1 }}
        MODULES: ${{ matrix.mvn_flags }}
        PERFORM_RELEASE: ${{ matrix.deploy_to_release_staging }}
        PUBLISH_TO: ossrh
        RELEASE_REPO_ID: ${{ matrix.release_repo_id }}
        RELEASE_VERSION: ${{ matrix.release_version }}
        SNAPSHOT_VERSION: ${{ matrix.snapshot_version }}
      name: Build and install
      run: "echo \"libnd4j build threads ${{ matrix.build_threads }}\"\necho \"deploy\
        \ to release staging repo or not ${{ matrix.deploy_to_release_staging }}\"\
        \necho \"release version ${{ matrix.release_version }}\"\necho \"snapshot\
        \ version ${{ matrix.snapshot_version }}\"\necho \"debug enabled ${{ matrix.debug_enabled\
        \ }}\"\necho \"libnd4j url ${{ matrix.libnd4j_file_download }}\"\necho \"\
        maven flags ${{ matrix.mvn_flags }}\"\necho \"snapshot version ${{ matrix.snapshot_version\
        \ }}\"\necho \"server id ${{ matrix.server_id }}\"\necho \"release repo id\
        \ ${{ matrix.release_repo_id }}\"\n\ngpg --version\ngpg1 --version\nbrew list\n\
        brew list --cask\n# download libnd4j from a url and set it up if LIBND4J_FILE_NAME\
        \ is defined\nbash ./bootstrap-libnd4j-from-url.sh macosx arm64 \"${{ matrix.helper\
        \ }}\" \"${{ matrix.extension }}\"\nif [ \"$PERFORM_RELEASE\" == 1 ]; then\n\
        \          echo \"Performing release with command ${COMMAND}\"\n         \
        \ bash ${GITHUB_WORKSPACE}/release-specified-component.sh  \"${RELEASE_VERSION}\"\
        \ \"${SNAPSHOT_VERSION}\" \"${RELEASE_REPO_ID}\" \"${COMMAND}\"\n\nelse\n\
        \        echo \"Running build and deploying to snapshots\"\n        eval \"\
        ${COMMAND}\"\nfi\n"
      shell: bash
    strategy:
      fail-fast: false
      matrix:
        extension:
        - ''
        helper:
        - ''
        include:
        - experimental: true
          mvn_ext: ${{ github.event.inputs.mvnFlags }}
          name: Extra maven flags
        - debug_enabled: ${{ github.event.inputs.debug_enabled }}
          experimental: true
          name: Debug enabled
        - experimental: true
          name: OS to run on
          runs_on: ${{ github.event.inputs.runsOn }}
        - experimental: true
          libnd4j_file_download: ${{ github.event.inputs.libnd4jUrl }}
          name: OS to run on
        - deploy_to_release_staging: ${{ github.event.inputs.deployToReleaseStaging
            }}
          experimental: true
          name: Whether to deploy to release staging or not
        - experimental: true
          name: Release version
          release_version: ${{ github.event.inputs.releaseVersion }}
        - experimental: true
          name: Snapshot version
          snapshot_version: ${{ github.event.inputs.snapshotVersion }}
        - experimental: true
          name: Server id
          server_id: ${{ github.event.inputs.serverId }}
        - experimental: true
          name: The release repository to run on
          release_repo_id: ${{ github.event.inputs.releaseRepoId }}
        - experimental: true
          mvn_flags: ${{ github.event.inputs.mvnFlags }}
          name: Extra maven flags to use as part of the build
        - build_threads: ${{ github.event.inputs.buildThreads }}
          experimental: true
          name: The number of threads to build libnd4j with
on:
  repository_dispatch:
    types: trigger-ga___build-deploy-mac-arm64.yml
