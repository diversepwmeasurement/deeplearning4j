jobs:
  linux-x86_64-cuda-11-6:
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Cancel Previous Runs
      uses: styfle/cancel-workflow-action@0.8.0
      with:
        access_token: ${{ github.token }}
    - continue-on-error: true
      uses: actions/checkout@v2
    - continue-on-error: true
      name: Set mvn build command based on matrix
      run: "if  [  \"${{ matrix.libnd4j_file_download }}\" != '' ]; then\n     modules=':nd4j-cuda-11.6,:nd4j-cuda-11.6-preset'\n\
        elif [ \"${{ matrix.helper }}\" == '' ]; then\n   echo \"Building libnd4j\
        \ from source\"\n   modules=':nd4j-cuda-11.6,:nd4j-cuda-11.6-preset,:libnd4j,:nd4j-cuda-11.6-platform'\n\
        else \n     echo \"Building libnd4j from source\"\n     modules=':nd4j-cuda-11.6,:nd4j-cuda-11.6-preset,:libnd4j'\n\
        fi\ncommand=\"mvn ${{ matrix.mvn_ext }} -Pcuda --also-make  -pl ${modules}\
        \ -Dlibnd4j.compute='3.7 5.0 5.2 6.0 6.1 7.0 7.5 8.0 8.6' -Dlibnd4j.cpu.compile.skip=true\
        \ -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.http.retryHandler.count=3\
        \   -Possrh -Dlibnd4j.buildthreads=${{ matrix.build_threads }}  -Djavacpp.platform=linux-x86_64\
        \ -Dlibnd4j.chip=cuda --also-make -Pcuda clean --batch-mode package deploy\
        \ -DskipTests\"\nlibnd4j_download_file_url=\"\"\nif [ \"${{ matrix.helper\
        \ }}\" != '' ] && [ \"${{ matrix.extension }}\" != '' ]; then\n   mvn_ext=\"\
        \ -Djavacpp.platform.extension=-${{ matrix.helper }}-${{ matrix.extension\
        \ }} -Dlibnd4j.helper=${{ matrix.helper }} -Dlibnd4j.extension=${{ matrix.extension\
        \ }} -Dlibnd4j.classifier=linux-x86_64-cuda-11.6-${{ matrix.helper }}-${{matrix.extension}}\"\
        \n   libnd4j_download_file_url=\"linux-cuda-11.6-${{ matrix.extension }}-${{\
        \ matrix.helper }}\"\nelif [ \"${{ matrix.helper }}\" != '' ]; then\n   mvn_ext=\"\
        \ -Djavacpp.platform.extension=-${{ matrix.helper }} -Dlibnd4j.helper=${{\
        \ matrix.helper }} -Dlibnd4j.classifier=linux-x86_64-cuda-11.6-${{ matrix.helper\
        \ }}\"\n   libnd4j_download_file_url=\"linux-cuda-11.6-${{ matrix.extension\
        \ }}-${{ matrix.helper }}\"\nelse\n   mvn_ext=\" -Dlibnd4j.classifier=linux-x86_64-cuda-11.6\"\
        \n   libnd4j_download_file_url=\"linux-cuda-11.6-${{ matrix.extension }}-${{\
        \ matrix.helper }}\"\n\nfi\ncommand=\"${command} ${mvn_ext}\"\necho \"Setting\
        \ command for helper ${{ matrix.helper }} and extension ${{ matrix.extension\
        \ }} to ${command}\"\necho \"COMMAND=${command}\" >> $GITHUB_ENV\n"
      shell: bash
    - continue-on-error: true
      uses: ./.github/actions/set-linux-distro-version
    - continue-on-error: true
      uses: ./.github/actions/remove-unneeded-tools-linux
    - continue-on-error: true
      uses: ./.github/actions/update-deps-linux
    - continue-on-error: true
      id: cache-cmake
      name: Cache cmake install
      uses: actions/cache@v2
      with:
        key: ${{ runner.os }}-cmake
        path: /opt/cmake
        restore-keys: ${{ runner.os }}-cmake
    - continue-on-error: true
      id: cache-protobuf
      name: Cache protobuf install
      uses: actions/cache@v2
      with:
        key: ${{ matrix.runs_on }}-protobuf
        path: /opt/protobuf
        restore-keys: ${{ matrix.runs_on }}-protobuf
    - continue-on-error: true
      if: steps.cache-protobuf.outputs.cache-hit != 'true'
      uses: ./.github/actions/install-protobuf-linux
    - continue-on-error: true
      if: steps.cache-cmake.outputs.cache-hit != 'true'
      uses: ./.github/actions/install-cmake-linux
    - continue-on-error: true
      name: Set up Java for publishing to GitHub Packages
      uses: actions/setup-java@v2
      with:
        cache: maven
        distribution: temurin
        gpg-passphrase: MAVEN_GPG_PASSPHRASE
        gpg-private-key: ${{ secrets.SONATYPE_GPG_KEY }}
        java-version: 11
        server-id: ${{ github.event.inputs.serverId }}
        server-password: MAVEN_PASSWORD
        server-username: MAVEN_USERNAME
    - continue-on-error: true
      env:
        GCC: 7
        cuda: 11.6.0
      if: steps.cache-cuda-116.outputs.cache-hit != 'true'
      uses: konduitai/cuda-install/.github/actions/install-cuda-ubuntu@master
    - continue-on-error: true
      env:
        CUDA_PATH: /usr/local/cuda
        CUDNN_ROOT_DIR: /usr/local/cuda
        DEBIAN_FRONTEND: noninteractive
        EXTENSION: ${{ matrix.extension }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        HELPER: ${{ matrix.helper }}
        LIBND4J_FILE_NAME: ${{ matrix.libnd4j_file_download }}
        LIBND4J_HOME_SUFFIX: cuda
        MAVEN_GPG_KEY: ${{ secrets.SONATYPE_GPG_KEY }}
        MAVEN_GPG_PASSPHRASE: ${{ secrets.PACKAGES_GPG_PASS }}
        MAVEN_OPTS: -Xmx2g
        MAVEN_PASSWORD: ${{ secrets.SONATYPE_USER1_PASS }}
        MAVEN_USERNAME: ${{ secrets.SONATYPE_USER_1 }}
        MODULES: ${{ matrix.mvn_flags }}
        PERFORM_RELEASE: ${{ matrix.deploy_to_release_staging }}
        PUBLISH_TO: ossrh
        RELEASE_REPO_ID: ${{ matrix.release_repo_id }}
        RELEASE_VERSION: ${{ matrix.release_version }}
        SNAPSHOT_VERSION: ${{ matrix.snapshot_version }}
      name: Run cuda compilation on linux-x86_64
      run: "echo \"libnd4j build threads ${{ matrix.build_threads }}\"\necho \"deploy\
        \ to release staging repo or not ${{ matrix.deploy_to_release_staging }}\"\
        \necho \"release version ${{ matrix.release_version }}\"\necho \"snapshot\
        \ version ${{ matrix.snapshot_version }}\"\necho \"debug enabled ${{ matrix.debug_enabled\
        \ }}\"\necho \"libnd4j url ${{ matrix.libnd4j_file_download }}\"\necho \"\
        maven flags ${{ matrix.mvn_flags }}\"\necho \"snapshot version ${{ matrix.snapshot_version\
        \ }}\"\necho \"server id ${{ matrix.server_id }}\"\necho \"release repo id\
        \ ${{ matrix.release_repo_id }}\"\n\nexport CUDA_PATH=/usr/local/cuda-11.6\n\
        export PATH=/opt/protobuf/bin:/opt/cmake/bin:$PATH\nexport PATH=\"/usr/local/cuda-11.6/bin:$PATH\"\
        \nnvcc --version\nmvn --version\ncmake --version\nprotoc --version\nsudo apt-get\
        \ autoremove\nsudo apt-get clean\nbash ./change-cuda-versions.sh 11.6\n# download\
        \ libnd4j from a url and set it up if LIBND4J_FILE_NAME is defined\nbash ./bootstrap-libnd4j-from-url.sh\
        \ linux cuda 11.6 \"${{ matrix.helper }}\"\n# Note: we need this for the cudnn\
        \ helpers, our cmake can't find it otherwise.\n# See here: https://github.com/eclipse/deeplearning4j/blob/master/libnd4j/CMakeLists.txt#L298\n\
        if [ \"$PERFORM_RELEASE\" == 1 ]; then\n          echo \"Performing release\"\
        \n          bash ${GITHUB_WORKSPACE}/release-specified-component.sh  \"${RELEASE_VERSION}\"\
        \ \"${SNAPSHOT_VERSION}\" \"${RELEASE_REPO_ID}\" \"${COMMAND}\"\n        \
        \ else\n             echo \"Running build and deploying to snapshots\"\n \
        \            eval \"${COMMAND}\"\nfi\n"
      shell: bash
    strategy:
      fail-fast: false
      matrix:
        extension:
        - ''
        helper:
        - cudnn
        - ''
        include:
        - experimental: true
          mvn_ext: ${{ github.event.inputs.mvnFlags }}
          name: Extra maven flags
        - debug_enabled: ${{ github.event.inputs.debug_enabled }}
          experimental: true
          name: Debug enabled
        - experimental: true
          name: OS to run on
          runs_on: ${{ github.event.inputs.runsOn }}
        - experimental: true
          libnd4j_file_download: ${{ github.event.inputs.libnd4jUrl }}
          name: OS to run on
        - deploy_to_release_staging: ${{ github.event.inputs.deployToReleaseStaging
            }}
          experimental: true
          name: Whether to deploy to release staging or not
        - experimental: true
          name: Release version
          release_version: ${{ github.event.inputs.releaseVersion }}
        - experimental: true
          name: Snapshot version
          snapshot_version: ${{ github.event.inputs.snapshotVersion }}
        - experimental: true
          name: Server id
          server_id: ${{ github.event.inputs.serverId }}
        - experimental: true
          name: The release repository to run on
          release_repo_id: ${{ github.event.inputs.releaseRepoId }}
        - experimental: true
          mvn_flags: ${{ github.event.inputs.mvnFlags }}
          name: Extra maven flags to use as part of the build
        - build_threads: ${{ github.event.inputs.buildThreads }}
          experimental: true
          name: The number of threads to build libnd4j with
on:
  repository_dispatch:
    types: trigger-ga___build-deploy-linux-cuda-11.6.yml
