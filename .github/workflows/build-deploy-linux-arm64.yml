jobs:
  linux-arm64:
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: AutoModality/action-clean@v1
    - continue-on-error: true
      name: Cancel Previous Runs
      uses: styfle/cancel-workflow-action@0.8.0
      with:
        access_token: ${{ github.token }}
    - continue-on-error: true
      uses: actions/checkout@v2
    - continue-on-error: true
      uses: ./.github/actions/set-linux-distro-version
    - continue-on-error: true
      uses: ./.github/actions/update-deps-linux
    - continue-on-error: true
      id: cache-cmake
      name: Cache cmake install
      uses: actions/cache@v2
      with:
        key: ${{ runner.os }}-cmake
        path: /opt/cmake
        restore-keys: ${{ runner.os }}-cmake
    - continue-on-error: true
      id: cache-protobuf
      name: Cache protobuf install
      uses: actions/cache@v2
      with:
        key: ${{ runner.os }}-protobuf
        path: /opt/protobuf
        restore-keys: ${{ runner.os }}-protobuf
    - continue-on-error: true
      if: steps.cache-protobuf.outputs.cache-hit != 'true'
      uses: ./.github/actions/install-protobuf-linux
    - continue-on-error: true
      if: steps.cache-cmake.outputs.cache-hit != 'true'
      uses: ./.github/actions/install-cmake-linux
    - continue-on-error: true
      name: Set up Java for publishing to OSSRH
      uses: actions/setup-java@v2
      with:
        cache: maven
        distribution: temurin
        gpg-passphrase: MAVEN_GPG_PASSPHRASE
        gpg-private-key: ${{ secrets.SONATYPE_GPG_KEY }}
        java-version: 11
        server-id: ${{ github.event.inputs.serverId }}
        server-password: MAVEN_PASSWORD
        server-username: MAVEN_USERNAME
    - continue-on-error: true
      if: ${{ github.event.inputs.libnd4jUrl != '' }}
      name: Setup libnd4j home if a download url is specified
      run: 'mkdir "${GITHUB_WORKSPACE}/openblas_home"

        cd "${GITHUB_WORKSPACE}/openblas_home"

        wget https://repo1.maven.org/maven2/org/bytedeco/openblas/0.3.19-1.5.7/openblas-0.3.19-1.5.7-linux-arm64.jar

        unzip openblas-0.3.19-1.5.7-linux-arm64.jar

        cd ..

        echo "OPENBLAS_PATH=${GITHUB_WORKSPACE}/openblas_home/org/bytedeco/openblas/linux-arm64"
        >> "$GITHUB_ENV"

        cp ${GITHUB_WORKSPACE}/openblas_home/org/bytedeco/openblas/linux-arm64/libopenblas.so.0  ${GITHUB_WORKSPACE}/openblas_home/org/bytedeco/openblas/linux-arm64/libopenblas.so

        '
      shell: bash
    - continue-on-error: true
      env:
        BUILD_USING_MAVEN: 1
        CURRENT_TARGET: arm64
        DEBIAN_FRONTEND: noninteractive
        DEPLOY: 1
        DEPLOY_TO: ossrh
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        LIBND4J_BUILD_THREADS: ${{ github.event.inputs.buildThreads }}
        LIBND4J_CLASSIFIER: linux-arm64
        LIBND4J_FILE_NAME: ${{ github.event.inputs.libnd4jUrl }}
        MAVEN_GPG_KEY: ${{ secrets.SONATYPE_GPG_KEY }}
        MAVEN_GPG_PASSPHRASE: ${{ secrets.PACKAGES_GPG_PASS }}
        MAVEN_PASSWORD: ${{ secrets.SONATYPE_USER1_PASS }}
        MAVEN_USERNAME: ${{ secrets.SONATYPE_USER_1 }}
        MODULES: ${{ github.event.inputs.mvnFlags }}
        PERFORM_RELEASE: ${{ github.event.inputs.deployToReleaseStaging }}
        PROTO_EXEC: /opt/protobuf/bin/protoc
        PUBLISH_TO: ossrh
        RELEASE_REPO_ID: ${{ github.event.inputs.releaseRepoId }}
        RELEASE_VERSION: ${{ github.event.inputs.releaseVersion }}
        SNAPSHOT_VERSION: ${{ github.event.inputs.snapshotVersion }}
        TARGET_OS: linux
      name: Build on  linux-arm64
      run: "echo \"libnd4j build threads ${{ github.event.inputs.buildThreads }}\"\
        \necho \"deploy to release staging repo or not ${{ github.event.inputs.deployToReleaseStaging\
        \ }}\"\necho \"release version ${{ github.event.inputs.releaseVersion }}\"\
        \necho \"snapshot version ${{ github.event.inputs.snapshotVersion }}\"\necho\
        \ \"debug enabled ${{ github.event.inputs.debug_enabled }}\"\necho \"maven\
        \ flags ${{ github.event.inputs.mvnFlags }}\"\necho \"snapshot version ${{\
        \ github.event.inputs.snapshotVersion }}\"\necho \"server id ${{ github.event.inputs.serverId\
        \ }}\"\necho \"release repo id ${{ github.event.inputs.releaseRepoId }}\"\n\
        echo \"libnd4j file url ${{ github.event.inputs.libnd4jUrl }}\"\n\nsudo sysctl\
        \ vm.overcommit_memory=2\nexport PATH=/opt/protobuf/bin:/opt/cmake/bin:$PATH\n\
        mvn --version\ncmake --version\nprotoc --version\n# download libnd4j from\
        \ a url and set it up if LIBND4J_FILE_NAME is defined\necho \"Executing bootstrap\
        \ if exists\"\nbash ./bootstrap-libnd4j-from-url.sh linux arm64\nif [ \"${{\
        \  github.event.inputs.libnd4jUrl }}\" != '' ]; then\n        echo \"Building\
        \ only java modules using a pre existing libnd4j home\"\n        export MODULES=\"\
        ${MODULES} -pl :nd4j-native,:nd4j-native-preset --also-make -Dlibnd4jhome=${GITHUB_WORKSPACE}/libnd4j\"\
        \n    else\n        echo \"Building all modules\"\n        export MODULES=\"\
        ${MODULES} -pl :libnd4j,:nd4j-native,:nd4j-native-preset --also-make -Dlibnd4jhome=${GITHUB_WORKSPACE}/libnd4j\"\
        \nfi\n\n${GITHUB_WORKSPACE}/libnd4j/pi_build.sh\n"
      shell: bash
on:
  repository_dispatch:
    types: trigger-ga___build-deploy-linux-arm64.yml
