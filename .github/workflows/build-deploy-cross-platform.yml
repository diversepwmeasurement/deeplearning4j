jobs:
  linux-x86_64:
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Cancel Previous Runs
      uses: styfle/cancel-workflow-action@0.8.0
      with:
        access_token: ${{ github.token }}
    - continue-on-error: true
      uses: actions/checkout@v2
    - continue-on-error: true
      uses: ./.github/actions/set-linux-distro-version
    - continue-on-error: true
      uses: ./.github/actions/update-deps-linux
    - continue-on-error: true
      id: cache-cmake
      name: Cache cmake install
      uses: actions/cache@v2
      with:
        key: ${{ runner.os }}-cmake
        path: /opt/cmake
        restore-keys: ${{ runner.os }}-cmake
    - continue-on-error: true
      id: cache-protobuf
      name: Cache protobuf install
      uses: actions/cache@v2
      with:
        key: ${{ runner.os }}-protobuf
        path: /opt/protobuf
        restore-keys: ${{ runner.os }}-protobuf
    - continue-on-error: true
      if: steps.cache-protobuf.outputs.cache-hit != 'true'
      uses: ./.github/actions/install-protobuf-linux
    - continue-on-error: true
      if: steps.cache-cmake.outputs.cache-hit != 'true'
      uses: ./.github/actions/install-cmake-linux
    - continue-on-error: true
      name: Set up Java for publishing to OSSRH
      uses: actions/setup-java@v2
      with:
        cache: maven
        distribution: temurin
        gpg-passphrase: MAVEN_GPG_PASSPHRASE
        gpg-private-key: ${{ secrets.SONATYPE_GPG_KEY }}
        java-version: 11
        server-id: ${{ github.event.inputs.serverId }}
        server-password: MAVEN_PASSWORD
        server-username: MAVEN_USERNAME
    - continue-on-error: true
      env:
        DEBIAN_FRONTEND: noninteractive
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        MAVEN_GPG_KEY: ${{ secrets.SONATYPE_GPG_KEY }}
        MAVEN_GPG_PASSPHRASE: ${{ secrets.PACKAGES_GPG_PASS }}
        MAVEN_PASSWORD: ${{ secrets.SONATYPE_USER1_PASS }}
        MAVEN_USERNAME: ${{ secrets.SONATYPE_USER_1 }}
        PERFORM_RELEASE: ${{ github.event.inputs.deployToReleaseStaging }}
        PUBLISH_TO: ossrh
        RELEASE_REPO_ID: ${{ github.event.inputs.releaseRepoId }}
        RELEASE_VERSION: ${{ github.event.inputs.releaseVersion }}
        SNAPSHOT_VERSION: ${{ github.event.inputs.snapshotVersion }}
      name: Build on  linux-x86_64
      run: "echo \"libnd4j build threads ${{ github.event.inputs.buildThreads }}\"\
        \necho \"deploy to release staging repo or not ${{ github.event.inputs.deployToReleaseStaging\
        \ }}\"\necho \"release version ${{ github.event.inputs.releaseVersion }}\"\
        \necho \"snapshot version ${{ github.event.inputs.snapshotVersion }}\"\necho\
        \ \"debug enabled ${{ github.event.inputs.debug_enabled }}\"\necho \"libnd4j\
        \ url ${{ github.event.inputs.libnd4jUrl }}\"\necho \"maven flags ${{ github.event.inputs.mvnFlags\
        \ }}\"\necho \"snapshot version ${{ github.event.inputs.snapshotVersion }}\"\
        \necho \"server id ${{ github.event.inputs.serverId }}\"\necho \"release repo\
        \ id ${{ github.event.inputs.releaseRepoId }}\"\n\nsudo sysctl vm.overcommit_memory=2\n\
        export PATH=/opt/protobuf/bin:/opt/cmake/bin:$PATH\nmvn --version\ncmake --version\n\
        protoc --version\nsudo apt-get autoremove\nsudo apt-get clean\ncommand=\"\
        mvn   -Possrh -pl !:nd4j-native,!libnd4j,!:nd4j-native-preset,!:nd4j-native-platform\
        \  -DskipTestResourceEnforcement=true -Djavacpp.platform=linux-x86_64 -Dlibnd4j.chip=cpu\
        \ -Pcpu --batch-mode deploy -DskipTests\"\nif [ \"$PERFORM_RELEASE\" == 1\
        \ ]; then\n          echo \"Performing release\"\n          bash ${GITHUB_WORKSPACE}/release-specified-component.sh\
        \  \"${RELEASE_VERSION}\" \"${SNAPSHOT_VERSION}\" \"${RELEASE_REPO_ID}\" \"\
        ${command}\"\n         else\n             echo \"Running build and deploying\
        \ to snapshots\"\n             eval \"$command\"\nfi\n\nbash ./change-spark-versions.sh\
        \ 3.1.2\n\nif [ \"$PERFORM_RELEASE\" == 1 ]; then\n              echo \"Performing\
        \ release\"\n              bash ${GITHUB_WORKSPACE}/release-specified-component.sh\
        \  \"${RELEASE_VERSION}\" \"${SNAPSHOT_VERSION}\" \"${RELEASE_REPO_ID}\" \"\
        ${command}\"\n             else\n                 echo \"Running build and\
        \ deploying to snapshots\"\n                 eval \"$command\"\nfi\n"
      shell: bash
on:
  repository_dispatch:
    types: trigger-ga___build-deploy-cross-platform.yml
